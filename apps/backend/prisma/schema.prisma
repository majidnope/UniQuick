generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  phone         String         @unique
  email         String?        @unique
  name          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?      // Soft delete
  roles         Role[]         @relation("UserRoles")
  addresses     Address[]
  refreshTokens RefreshToken[]
  otpHistory    OtpHistory[]
  orders        Order[]
  cart          CartItem[]
  Payment Payment[]
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  street    String
  city      String
  state     String
  country   String
  zipCode   String
  isPrimary Boolean  @default(false) // To mark the primary address
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? // Soft delete
}

model OtpHistory {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  otp       String   // Store hashed OTP only
  expiresAt DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique // Store hashed token
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  permissions Permission[] @relation("RolePermissions")
  users       User[]       @relation("UserRoles")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  roles       Role[]   @relation("RolePermissions")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id          String     @id @default(cuid())
  name        String
  description String?
  price       Float
  salePrice   Float?
  imageUrl    String?
  stock       Int        @default(0)
  isActive    Boolean    @default(true)
  categoryId  String
  category    Category   @relation(fields: [categoryId], references: [id])
  cartItems   CartItem[]
  orderItems  OrderItem[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  imageUrl  String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id], onDelete: Restrict)
  items           OrderItem[]
  totalAmount     Decimal    @db.Decimal(10, 2)
  status          OrderStatus @default(PENDING)
  deliveryAddress String
  deliveryPersonId String?
  notes           String?
  expectedDeliveryAt DateTime
  actualDeliveryAt DateTime?
  customerRating Int? @db.SmallInt
  customerFeedback String?

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  deletedAt       DateTime?   // Soft delete
  Payment Payment[]
  OrderHistory OrderHistory[]


  @@index([userId])
  @@index([status])
  @@index([deliveryPersonId])
  @@index([createdAt])
}

model OrderHistory {
  id        String      @id @default(cuid())
  orderId   String
  order     Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  status    OrderStatus // Track status changes
  notes    String?
  changedBy String?
  changedAt DateTime    @default(now())
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id           String        @id @default(cuid())
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  orderId      String?
  order        Order?        @relation(fields: [orderId], references: [id], onDelete: Restrict)
  method       String        // e.g., "Credit Card", "UPI", "Cash on Delivery"
  transactionId String?      // Store payment gateway transaction ID
  status       PaymentStatus @default(PENDING)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([userId])
  @@index([orderId])
  @@index([status])
}


enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum RefundStatus {
  NOT_APPLICABLE
  PENDING
  APPROVED
  PROCESSED
  REJECTED
}